package br.com.examplesjava.util.list;import br.com.examplesjava.entity.Person;import java.math.BigDecimal;import java.util.Arrays;import java.util.List;import java.util.Optional;import java.util.function.Predicate;import java.util.stream.Collectors;public class ListLambda {  public static void main(String[] args) {    final List<String> numerosEmString = Arrays.asList("1.0", "2.0", "3.0");    List<BigDecimal> numbersDec =        numerosEmString.stream().map(BigDecimal::new).collect(Collectors.toList());    List<String> numbersStr = Arrays.asList("1", "2", "3", "4", "5");    List<Integer> numerosPares =        numbersStr.stream().map(Integer::new).filter(n -> n % 2 == 0).collect(Collectors.toList());    List<String> names = Arrays.asList("John", "Jack", "Hamilton", "George");    Optional<String> result = names.stream().filter(name -> name.startsWith("H")).findAny();    List<String> longnames =        names.stream()            .filter(str -> str.length() > 6 && str.length() < 8) // Multiple conditions            .collect(Collectors.toList());    longnames.forEach(System.out::println);        if (!result.isPresent()) {          System.out.println("Not found");        } else {          System.out.println(result.get());        }    System.out.println("_________________");        List<String> resultValue = names.stream()            .filter(name -> name.startsWith("J"))            .collect(Collectors.toList());        resultValue.forEach(element -> System.out.println(element));    System.out.println("_________________");        //JOIN LIST        String resultJoin = names.stream()            .filter(name -> name.startsWith("J"))            .collect(Collectors.joining(", "));        System.out.println(resultJoin);    System.out.println("_________________");    // list object    List<Person> people =        Arrays.asList(            new Person("John", 26),            new Person("Jack", 40),            new Person("Hamilton", 14),            new Person("George", 63));           List<String> peopleList =                people.stream()                    .filter(p -> p.getAge() == 63)                    .map(p -> p.getName().toUpperCase())                    .collect(Collectors.toList());        peopleList.forEach(System.out::println);    System.out.println("_________________");        List<Person> children =            people.stream()                .filter(person -> person.getName().equals("Hamilton"))                .collect(Collectors.toList());      List<String> childrenList = children.stream()          .map(person -> person.getName())          .collect(Collectors.toList());          childrenList.forEach(child -> System.out.println(child));    System.out.println("________ Age > 20 _________");        people.stream()            .filter(p -> p.getAge() > 20)            .forEach(p -> {              System.out.println(p.getName() + " - " + p.getAge());            });    System.out.println("_______ Age > 40 __________");        people.stream()            .filter(p -> p.getAge() > 40)            .map(person -> person.getName())            .forEach(System.out::println);    System.out.println("_______ FILTER Integer __________");        List<Number> tmp = Arrays.asList(1, 2, 3);        List<Integer> tmp1 = Arrays            .stream(new Integer[] { 1, 2, 3, 4, 5 })            .filter(tmp::contains)            .collect(Collectors.toList());        System.out.println(tmp1);    System.out.println("____________________ FILTER PREDICATE  __________________");    System.out.println("_______ FILTER PREDICATE EX 1 __________");    List<Person> filter1 = filterPerson(people, predName());    filter1.stream().map(person -> person.getName()).forEach(System.out::println);    System.out.println("_______ FILTER PREDICATE EX 2 __________");    List<Person> filter2 = filterPerson(people, predicateList());    filter2.stream()        .forEach(            p -> {              System.out.println(p.getName());            });    System.out.println("_______ FILTER PREDICATE EX 3 __________");        List<Person> filter3 = filterAllPred(people, allPredicates());        filter3.stream()            .forEach(                p -> {                  System.out.println(p.getName());                });  }  public static List<Person> filterPerson(List<Person> personList, Predicate<Person> predicate) {    return personList.stream().filter(predicate).collect(Collectors.toList());  }  public static Predicate<Person> predName() {    Predicate<Person> hami = p -> p.getName().equals("Hamilton");    Predicate<Person> geor = p -> p.getName().equals("George");    Predicate<Person> jack = p -> p.getName().equals("Jack");    Predicate<Person> joinPred = hami.or(geor);    Predicate<Person> joinPre = joinPred.or(jack);    return joinPre;  }  public static Predicate<Person> predicateList() {    List<Predicate<Person>> allpred =        List.of(            p -> p.getName().equals("Hamilton"),            p -> p.getName().equals("George"),            p -> p.getName().equals("Jack"));    Predicate<Person> pr = allpred.stream().reduce(p -> false, Predicate::or);    return pr;  }  //---------------------------------- ex 3 Predicate -----------------------------  public static List<Person> filterAllPred(      List<Person> personList, List<Predicate<Person>> allPredicates) {    return personList.stream()        .filter(allPredicates.stream().reduce(x -> false, Predicate::or))        .collect(Collectors.toList());  }  public static List<Predicate<Person>> allPredicates() {    List<Predicate<Person>> allpred =        List.of(            p -> p.getName().equals("Hamilton"),            p -> p.getName().equals("George"),            p -> p.getName().equals("Jack"));    return allpred;  }}